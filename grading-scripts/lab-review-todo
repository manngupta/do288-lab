#!/usr/bin/bash
#
# Copyright 2019 Red Hat, Inc
#
# NAME
#     lab-review - grading script for DO288 ch09s02 lab
#
# SYNOPSIS
#     lab-review {start|finish|grade}
#
#        start   - prepare the system for starting the lab
#        finish  - indicate you completed the lab and perform post-lab cleanup
#        grade   - grande the work done by the student
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, or solve for the particular lab of awesomeness.
#
# CHANGELOG
#   * Tue Jun 22 2021 Guy Bianco IV <gbianco@redhat.com>
#   - updates to OCP 4.6
#   - rewrite of example application
#   * Thu Aug 05 2017 Fernando Lozano <flozano@redhat.com>
#   - updates to OCP 4.1 and shared clister
#   * Thu Dec 27 2017 Fernando Lozano <flozano@redhat.com>
#   - original code


PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin

# Initialize and set some variables
run_as_root='true'

# Required by the do288 shlib
this='review-todo'
title='Lab: Comprehensive Review of OpenShift Development II'

# This defines which subcommands are supported (setup, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start finish grade)


function lab_start {

  ocp4_print_prereq_header
  ocp4_verify_local_clone_exist
  ocp4_is_cluster_up

  print_line ' Checking required artifacts:'
  ocp4_verify_prereq_git_projects 'todo-frontend' 'todo-backend'
  ocp4_verify_prereq_nexus_repositories 'nodejs'

  project_name="${RHT_OCP4_DEV_USER}-${this}"

  ocp4_fail_if_project_exists ${project_name}

  ocp4_print_setup_header
  ocp4_grab_lab_files

  ocp4_print_setup_footer
}

function lab_finish {
  ocp4_print_cleanup_header
  ocp4_login_as_developer
  ocp4_cleanup_lab_files
  ocp4_delete_project "${RHT_OCP4_DEV_USER}-${this}"

  ocp4_verify_local_clone_clean

  ocp4_print_cleanup_footer
}

function lab_grade {

  ocp4_print_grade_header

  local project="${RHT_OCP4_DEV_USER}-${this}"

  print_line " Checking the To Do List multicontainer application"

  ocp4_login_as_developer

  ocp4_pad "Enter project '${project}'"
  if oc project "${project}"
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  ########################
  # Database deployment  #
  ########################
  print_line
  print_line ' Checking the database deployment'

  local app='mariadb'

  ocp4_pad "Database pod is ready and runnning"
  if ocp4_check_pod_ready_and_running "${project}" "app.kubernetes.io/name=${app}"
  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_pad "Database references the 'DATABASE_NAME' parameter"
  local value=$(oc get pod/todo-list-mariadb-0 -o json | jq ".spec.containers[0].env[] | select(.name == \"MARIADB_DATABASE\") | .value" -)
  if [ "${value}" = "\"tododb\"" ]
  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_pad "Database references the 'DATABASE_USER' parameter"
  local value=$(oc get pod/todo-list-mariadb-0 -o json | jq ".spec.containers[0].env[] | select(.name == \"MARIADB_USER\") | .value" -)
  if [ "${value}" = "\"todouser\"" ]
  then
    print_PASS
  else
    print_FAIL
  fi

  ########################
  # API deployment       #
  ########################
  print_line
  print_line ' Checking the back-end deployment'

  local app='todo-list'

  ocp4_pad "API pod is ready and runnning"
  if ocp4_check_pod_ready_and_running "${project}" "app.kubernetes.io/name=${app}"
  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_pad "Route '${app}' exists"
  if oc get route "${app}" -o name
  then
    print_PASS
  else
    print_FAIL
  fi

  local hostname=$(oc get route "${app}" -o jsonpath='{.spec.host}')
  local url="http://${hostname}"

  ocp4_pad "Back-end HTTP API is available"
  if ocp4_check_http_status 200 "${url}"
  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_pad "Back-end HTTP API returns array of items"
  # local count='{"count":6}'
  if curl -s "${url}/api/items" | grep -q "\[.*\]"
  then
    print_PASS
  else
    print_FAIL
  fi

  ########################
  # UI deployment        #
  ########################
  print_line
  print_line ' Checking the front-end deployment'

  local app='todo-frontend'

  ocp4_pad "Front-end pod is ready and runnning"
  if ocp4_check_pod_ready_and_running "${project}" "deployment=${app}"
  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_pad "Route '${app}' exists"
  if oc get route "${app}" -o name
  then
    print_PASS
  else
    print_FAIL
  fi

  local hostname=$(oc get route "${app}" -o jsonpath='{.spec.host}')
  local url="http://${hostname}/index.html"

  ocp4_pad "Front-end welcome page is available"
  if ocp4_check_http_status 200 "${url}"
  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_pad "Front-end welcome page returns the expected title"
  local title='<title>DO288 Todo App</title>'
  if curl -s "${url}" | grep -q "${title}"
  then
    print_PASS
  else
    print_FAIL
  fi

  ########################
  # SSR deployment       #
  ########################
  print_line
  print_line ' Checking the export service deployment'

  local app='todo-ssr'

  ocp4_pad "SSR pod is ready and runnning"
  if ocp4_check_pod_ready_and_running "${project}" "deployment=${app}"
  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_pad "Route '${app}' exists"
  if oc get route "${app}" -o name
  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_pad "Config Map '${app}-host' contains API_HOST variable"
  local value=$(oc get cm/${app}-host -o jsonpath='{.data.API_HOST}')
  if [ "${value}" = "http://todo-list:3000" ]
  then
    print_PASS
  else
    print_FAIL
  fi

  local hostname=$(oc get route "${app}" -o jsonpath='{.spec.host}')
  local url="http://${hostname}/items"

  ocp4_pad "Front-end welcome page is available"
  if ocp4_check_http_status 200 "${url}"
  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_pad "Front-end welcome page returns the expected title"
  local title='<title>Todo Items</title>'
  if curl -s "${url}" | grep -q "${title}"
  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_print_grade_footer
}


############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
