#!/usr/bin/bash
#
# Copyright 2019 Red Hat, Inc.
#
# NAME
#     lab-source-build - grading script for DO288 ch01s07 lab
#
# SYNOPSIS
#     lab-source-build {start|finish|grade}
#
#        start   - prepare the system for starting the lab
#        finish  - perform post-lab cleanup
#        grade   - grande the work done by the student
#
# DESCRIPTION
#     This script, based on singular argument, either does setup, grading,
#     cleanup, or solve for the particular lab of awesomeness.
#
#
# CHANGELOG
#   * Fri May 31 2019 Ivan Chavero <ichavero@redhat.com>
#   - Updated for shared classroom
#   * Mon Mar 18 2019 Ricardo Jun <jtaniguc@redhat.com>
#   - Updated to support OpenShift 4.0
#   * Thu Oct 05 2017 Fernando Lozano <flozano@redhat.com>
#   - original code


PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'

# Required by the do288 shlib
this='source-build'
title='Lab: Deploying and Managing Applications on an OpenShift Cluster'


# This defines which subcommands are supported (setup, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start finish grade)


function lab_start {

  ocp4_print_prereq_header

  ocp4_verify_local_clone_exist
  ocp4_is_cluster_up
  print_line ' Checking required artifacts:'
  ocp4_verify_prereq_git_projects 'nodejs-helloworld'
  ocp4_verify_prereq_nexus_repositories 'nodejs'
  ocp4_fail_if_project_exists "${RHT_OCP4_DEV_USER}-${this}"

  ocp4_print_setup_header

  ocp4_grab_lab_files

  ocp4_print_setup_footer
}


function lab_finish {

  ocp4_print_cleanup_header
  ocp4_login_as_developer
  ocp4_cleanup_lab_files
  ocp4_delete_project "${RHT_OCP4_DEV_USER}-${this}"
  ocp4_verify_local_clone_clean
  ocp4_print_cleanup_footer
}


function lab_grade {

  ocp4_print_grade_header
  ocp4_login_as_developer

  local project="${RHT_OCP4_DEV_USER}-source-build"
  local app='greet'

  ocp4_pad "Enter project '${project}'"
  if oc project "${RHT_OCP4_DEV_USER}-${this}"
  then
    print_PASS
  else
   print_FAIL
  fi

  ocp4_exit_on_failure

  ocp4_pad "Build config points to the HTTPS git repo"
  local git_uri=$(oc get bc "${app}" -o jsonpath='{.spec.source.git.uri}')
  if [ "${git_uri}" = "https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps" ] || [ "${git_uri}" = "https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps.git" ]

  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_pad "Latest '${app}' build is successful"
  if ocp4_check_latest_build_successful "${project}" "${app}"
  then
    print_PASS
  else
   print_FAIL
  fi

  ocp4_pad "Pod '${app}' is ready and runnning"
  if ocp4_check_pod_from_deployment_ready_and_running "${project}" "${app}"
  then
    print_PASS
  else
   print_FAIL
  fi

  ocp4_pad "Pod '${app}' logs shows application is started"
  local pod=$(oc get pod -l "deployment=${app}" -o name)
  if oc logs "${pod}" | grep -q 'listening on port 8080'
  then
    print_PASS
  else
   print_FAIL
  fi

  ocp4_pad "Route '${app}' exists"
  if oc get route "${app}" -o name
  then
    print_PASS
  else
    print_FAIL
  fi

  local msg='Hello World'

  ocp4_pad "Application '${app}' returns the '${msg}' message"
  local hostname=$(oc get route "${app}" -o jsonpath='{.spec.host}')
  if curl -s "http://${hostname}" | grep -q "${msg}"
  then
    print_PASS
  else
    print_FAIL
  fi

  ocp4_print_grade_footer
}


############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
